LIBRARY IEEE;
USE IEEE.std_logic_1164.all;


-- THE INPUTS ARE THE IR AND THE FLAG REGISTERS AND CLK
-- THE OUTPUTS ARE 8 BIT ADDRESS FOR BRANCHING, ALL CONTROL SIGNALS
-- INSIDE IT HAS THE CONTROL STORE AND A MICRO PC REGISTER AS WELL AS THE PLA FOR THE MICRO PC


ENTITY IR_DECODER IS 
	PORT(
		IR_REGISTER,FLAG_REGISTER: IN STD_LOGIC_VECTOR(15 DOWNTO 0);
		CLK: IN STD_LOGIC;
		BRANCH_ADDRESS: OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		PC_OUT,MDR_OUT,Z_OUT,TEMP_OUT,PC_IN,MDR_IN,Z_IN,TEMP_IN,MDR_IN,MAR_IN,Y_IN,IR_IN,READ_MEM,WRITE_MEM,CLEAR_Y,CARRY_IN,WMFC: OUT STD_LOGIC;
		GENERAL_REGISTERS_IN,GENERAL_REGISTERS_OUT: OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		ALU_OPERATION: OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
		
	);
END IR_DECODER;



--- THE DECODER SHOULD GET THE CURRENT MICROINSTRUCTION FROM THE CONTROL STORE USING THE MICRO PC
--- THEN IT SHOULD CALCULATE THE NEW VALUE OF THE MICRO PC USING THE PLA 
--- THEN IT SHOULD DECODE THE MICRO INSTRUCTION TO THE CONTROL SIGNALS


ARCHITECTURE ARCH1 OF IR_DECODER IS 

--REGISTER FOR MICRO PC
COMPONENT NREGISTER IS 
	GENERIC(N : INTEGER := 8);
	PORT( 	CLK,RST : IN std_logic;
		D: IN STD_LOGIC_VECTOR(N-1 DOWNTO 0);
	   	Q : OUT STD_LOGIC_VECTOR(N-1 DOWNTO 0);
		ENABLE: IN STD_LOGIC
	);
END COMPONENT;


--CONTROL STORE FOR MICRO INSTRUCTIONS
COMPONENT CONTROL_STORE IS 
	PORT( 	
		MICRO_PC: IN STD_LOGIC_VECTOR(7 DOWNTO 0);
	   	MICRO_INSTRUCTION : OUT STD_LOGIC_VECTOR(19 DOWNTO 0)
	);
END COMPONENT;



--PLA TO SET THE VALUE OF THE MICRO PC
COMPONENT PLA IS 
	PORT( 	
		MICRO_PC: IN STD_LOGIC_VECTOR(7 DOWNTO 0);
	   	MICRO_INSTRUCTION : IN STD_LOGIC_VECTOR(19 DOWNTO 0);
		NEXT_MICRO_PC: STD_LOGIC_VECTOR(7 DOWNTO 0)
	);
END COMPONENT;



--NEEDED SIGNALS
--??


BEGIN



END ARCHITECTURE;